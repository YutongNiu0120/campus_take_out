<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <!-- 获取环境变量 -->
    <springProperty scope="context" name="applicationName" source="spring.application.name"/>
    <springProperty scope="context" name="profile" source="spring.profiles.active"/>
    <springProperty scope="context" name="logLevel" source="log.level"/>
    <springProperty scope="context" name="logPath" source="log.path"/>

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="${logPath}"/>

    <logger name="org.springframework" level="INFO"/>
    <logger name="org.springboot" level="INFO"/>
    <logger name="io" level="INFO"/>
    <logger name="com.zaxxer.hikari" level="INFO"/>

    <!-- kafka log-->
    <logger name="org.apache.kafka" level="WARN" additivity="false"/>

    <logger name="org.apache" level="WARN" />
    <logger name="org.hibernate" level="WARN" />

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [] [%thread] %-5level %logger{30}[%line] - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- Error日志文件 -->
    <appender name="ERROR-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/${applicationName}.error.%d{yyyyMMdd}.%i.log</FileNamePattern>
            <!-- 日志文件最大尺寸 -->
            <maxFileSize>100MB</maxFileSize>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [] [%thread] %-5level %logger{30}[%line] - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- 全量日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/${applicationName}.%d{yyyyMMdd}.%i.log</FileNamePattern>
            <!-- 日志文件最大尺寸 -->
            <maxFileSize>100MB</maxFileSize>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [] [%thread] %-5level %logger{30}[%line] - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="ASYNC-FILE" class="ch.qos.logback.classic.AsyncAppender" includeLocation="true">
        <!--默认情况下，当blockingQueue的容量高于阈值时（80%），会丢弃ERROR以下级别的日志。如果不希望丢弃日志（既每次都全量保存），那可以设置为0-->
        <discardingThreshold>0</discardingThreshold>
        <!--默认情况下，队列的深度为256，不过该值首次建议设置大一些，后续根据自己业务的特点去调优。注意：该值会影响性能-->
        <queueSize>1024</queueSize>
        <!--添加需要异步输出appender，只能添加一个-->
        <appender-ref ref="FILE"/>
    </appender>
    <appender name="ASYNC-ERROR-FILE" class="ch.qos.logback.classic.AsyncAppender" includeLocation="true">
        <!--默认情况下，当blockingQueue的容量高于阈值时（80%），会丢弃ERROR以下级别的日志。如果不希望丢弃日志（既每次都全量保存），那可以设置为0-->
        <discardingThreshold>0</discardingThreshold>
        <!--默认情况下，队列的深度为256，不过该值首次建议设置大一些，后续根据自己业务的特点去调优。注意：该值会影响性能-->
        <queueSize>256</queueSize>
        <!--添加需要异步输出appender，只能添加一个-->
        <appender-ref ref="ERROR-FILE"/>
    </appender>

    <springProfile name="${profile}">
        <logger name="com.campus" level="${logLevel}"/>
        <logger name="java.sql.PreparedStatement" level="${logLevel}"/>

        <root level="${logLevel}">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ASYNC-FILE"/>
            <appender-ref ref="ASYNC-ERROR-FILE"/>
        </root>
    </springProfile>


</configuration>